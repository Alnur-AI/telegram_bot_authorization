import asyncio
import aiosqlite
from aiogram import Router
from datetime import datetime
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message
from argon2 import PasswordHasher

import config
bot = Bot(token=config.TOKEN)
DB_PATH = config.DB_PATH
dp = Dispatcher()
ph = PasswordHasher()

auth_router = Router()

class Registration(StatesGroup):
    credentials = State()  # –û–∂–∏–¥–∞–µ–º "–ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å"


class Login(StatesGroup):
    credentials = State()  # –û–∂–∏–¥–∞–µ–º "–ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å"


# ‚úÖ –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
async def event_update_main_menu(chat_id, message_id, telegram_id):
    """–ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞"""
    from menu import update_main_menu  # ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    await update_main_menu(chat_id, message_id, telegram_id)  # ‚úÖ –í—ã–∑—ã–≤–∞–µ–º `update_main_menu` —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@auth_router.message(Command("start"))
async def start_handler(message: Message):
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            """SELECT security.user_id, users.user_name 
               FROM security 
               JOIN users ON security.user_id = users.user_id
               WHERE security.telegram_id = ?""",
            (message.from_user.id,)
        ) as cursor:
            accounts = await cursor.fetchall()

    if accounts:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        accounts_list = "\n".join([f"{acc[1]} (ID: {acc[0]})" for acc in accounts])
        await message.answer(
            f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–º(–∞–º–∏):\n\n{accounts_list}\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ –æ–¥–∏–Ω –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é /login "
            "–∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç —Å /reg."
        )
    else:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /reg –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

# /reg
@auth_router.message(Command("reg"))
async def reg_handler(message: Message, state: FSMContext):
    await state.set_state(Registration.credentials)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")
@auth_router.message(Registration.credentials)
async def reg_credentials_handler(message: Message, state: FSMContext):
    credentials = message.text.strip().split(" ", 1)

    if len(credentials) != 2:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
        return

    username, password = credentials
    hashed_password = ph.hash(password)

    async with aiosqlite.connect(DB_PATH) as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π username
        async with db.execute("SELECT user_id FROM users WHERE user_name = ?", (username,)) as cursor:
            existing = await cursor.fetchone()
        if existing:
            await message.answer("–¢–∞–∫–æ–µ –∏–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ! –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ:")
            return

        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π user_id (–±–µ—Ä—ë–º –º–∞–∫—Å–∏–º—É–º + 1)
        async with db.execute("SELECT MAX(user_id) FROM users") as cursor:
            max_id = await cursor.fetchone()
            new_user_id = (max_id[0] or 0) + 1

        # –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.execute("INSERT INTO inventory (user_id, items) VALUES (?, ?)",
                         (new_user_id, '{}'))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ security (telegram_id —É–Ω–∏–∫–∞–ª–µ–Ω, –Ω–æ user_id –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º)
        await db.execute("INSERT INTO security (telegram_id, user_id, password) VALUES (?, ?, ?)",
                         (message.from_user.id, new_user_id, hashed_password))

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É users
        await db.execute("INSERT INTO users (telegram_id, user_id, user_name, reg_date) VALUES (?, ?, ?, ?)",
                         (message.from_user.id, new_user_id, username, datetime.now()))

        await db.commit()

    await state.clear()
    await message.answer(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í–∞—à –ª–æ–≥–∏–Ω: {username}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ /login.")

# /login
@auth_router.message(Command("login"))
async def login_handler(message: Message, state: FSMContext):
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT user_id FROM security WHERE telegram_id = ?", (message.from_user.id,)) as cursor:
            user = await cursor.fetchone()

        if not user:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –í–≤–µ–¥–∏—Ç–µ /reg.")
            return

        user_id = user[0]
        async with db.execute("SELECT is_active FROM user_session_history WHERE user_id = ? AND is_active = TRUE",
                              (user_id,)) as cursor:
            active_session = await cursor.fetchone()

        if active_session:
            await message.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è!")
            return

    await state.set_state(Login.credentials)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")
@auth_router.message(Login.credentials)
async def login_credentials_handler(message: Message, state: FSMContext):
    try:
        username, password = message.text.strip().split(maxsplit=1)
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")
        return

    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT user_id, password FROM security WHERE user_id = (SELECT user_id FROM users WHERE user_name = ?)",
                              (username,)) as cursor:
            user = await cursor.fetchone()
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

    user_id, stored_hash = user

    try:
        ph.verify(stored_hash, password)
    except Exception:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    async with aiosqlite.connect(DB_PATH) as db:
        try:
            login_time = datetime.now()

            # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
            await db.execute(
                "INSERT INTO user_session_history (user_id, login_time, is_active, last_activity) VALUES (?, ?, ?, ?)",
                (user_id, login_time, True, login_time)
            )

            # –ü–æ–ª—É—á–∞–µ–º log_id —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
            async with db.execute(
                    "SELECT log_id FROM user_session_history WHERE user_id = ? ORDER BY log_id DESC LIMIT 1",
                    (user_id,)
            ) as cursor:
                last_log_id = await cursor.fetchone()

            if last_log_id:
                # –û–±–Ω–æ–≤–ª—è–µ–º last_log_id –≤ security
                await db.execute(
                    "UPDATE security SET last_log_id = ? WHERE user_id = ?",
                    (last_log_id[0], user_id)
                )
                # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                sent_message = await message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏!")

                # üî• –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ `asyncio.create_task()`
                telegram_id = message.from_user.id
                asyncio.create_task(event_update_main_menu(message.chat.id, sent_message.message_id, telegram_id))
            else:
                await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å log_id –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏!")

            await db.commit()
            await state.clear()

        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–µ—Å—Å–∏–∏: {str(e)}")
            await db.rollback()

# /exit
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
async def exit_session(user_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        await db.execute("""
            UPDATE user_session_history 
            SET is_active = FALSE, was_notified = TRUE
            WHERE user_id = ? AND is_active = TRUE
        """, (user_id,))
        await db.commit()

@auth_router.message(Command("exit"))
async def exit_handler(message: Message, telegram_id):

    async with aiosqlite.connect(DB_PATH) as db:
        # –ü–æ–ª—É—á–∞–µ–º user_id –ø–æ telegram_id
        async with db.execute("SELECT user_id FROM users WHERE telegram_id = ?", (telegram_id,)) as cursor:
            result = await cursor.fetchone()

        if not result:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        user_id = result[0]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
        async with db.execute("""
            SELECT COUNT(*) FROM user_session_history 
            WHERE user_id = ? AND is_active = TRUE
        """, (user_id,)) as cursor:
            active_sessions = await cursor.fetchone()

        if active_sessions[0] == 0:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏.")
            return

        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
        await exit_session(user_id)
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –í–∞—à–∞ —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


