from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram import Router
from aiogram import Bot, Dispatcher

from auth import exit_handler

import config
bot = Bot(token=config.TOKEN)
dp = Dispatcher()
menu_router = Router()

@menu_router.callback_query(lambda c: c.data.startswith("open_shop"))
async def open_shop(callback: CallbackQuery):
    data = callback.data.split("|")
    telegram_id = int(data[1]) if len(data) > 1 else None

    print(f"üõí –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–∞–≥–∞–∑–∏–Ω –¥–ª—è Telegram ID: {telegram_id}")  # –õ–æ–≥–∏—Ä—É–µ–º

    #await shop_handler(callback.message,telegram_id)
    await callback.answer()


@menu_router.callback_query(lambda c: c.data.startswith("open_inventory"))
async def open_inventory(callback: CallbackQuery):
    data = callback.data.split("|")
    telegram_id = int(data[1]) if len(data) > 1 else None

    print(f"üéí –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –¥–ª—è Telegram ID: {telegram_id}")  # –õ–æ–≥–∏—Ä—É–µ–º

    #await inventory_handler(callback.message)
    await callback.answer()


@menu_router.callback_query(lambda c: c.data.startswith("open_stats"))
async def open_stats(callback: CallbackQuery):
    data = callback.data.split("|")
    telegram_id = int(data[1]) if len(data) > 1 else None

    print(f"üìä –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è Telegram ID: {telegram_id}")  # –õ–æ–≥–∏—Ä—É–µ–º

    #await stat_handler(callback.message)
    await callback.answer()


@menu_router.callback_query(lambda c: c.data.startswith("logout"))
async def logout(callback: CallbackQuery):
    data = callback.data.split("|")
    telegram_id = int(data[1]) if len(data) > 1 else None

    print(f"üö™ –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram ID: {telegram_id}")  # –õ–æ–≥–∏—Ä—É–µ–º

    await exit_handler(callback.message, telegram_id)
    await callback.answer()


@menu_router.callback_query(lambda c: c.data.startswith("find_game"))
async def find_game(callback: CallbackQuery):
    data = callback.data.split("|")
    telegram_id = int(data[1]) if len(data) > 1 else None

    print(f"üîç –ü–æ–∏—Å–∫ –∏–≥—Ä—ã –¥–ª—è Telegram ID: {telegram_id}")  # –õ–æ–≥–∏—Ä—É–µ–º

    await callback.answer("üîç –ù–∞–π—Ç–∏ –∏–≥—Ä—É - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")


@menu_router.callback_query(lambda c: c.data.startswith("interspace_training"))
async def interspace_training(callback: CallbackQuery):
    data = callback.data.split("|")
    telegram_id = int(data[1]) if len(data) > 1 else None

    print(f"üõ∞ –ò–Ω—Ç–µ—Ä—Å–ø–µ–π—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–ª—è Telegram ID: {telegram_id}")  # –õ–æ–≥–∏—Ä—É–µ–º

    await callback.answer("üõ∞ –ò–Ω—Ç–µ—Ä—Å–ø–µ–π—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")


@menu_router.callback_query(lambda c: c.data.startswith("return_main_menu"))
async def return_to_main_menu(callback: CallbackQuery):
    data = callback.data.split("|")
    telegram_id = int(data[1]) if len(data) > 1 else None

    if telegram_id is None:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    print(f"üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    try:
        await update_main_menu(callback.message.chat.id, callback.message.message_id, telegram_id)
        await callback.answer()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")


# ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞
async def update_main_menu(chat_id: int, message_id: int, telegram_id):
    if not chat_id or not message_id:
        print("‚ùå –û—à–∏–±–∫–∞: `chat_id` –∏–ª–∏ `message_id` –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã!")
        return

    try:
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text="üéÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_inline_menu(telegram_id)
        )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ–Ω—é: {e}")


# üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
def get_main_inline_menu(telegram_id: int):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –∏–≥—Ä—É", callback_data=f"find_game|{telegram_id}")],
            [InlineKeyboardButton(text="üõ∞ –ò–Ω—Ç–µ—Ä—Å–ø–µ–π—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", callback_data=f"interspace_training|{telegram_id}")],
            [InlineKeyboardButton(text="üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data=f"open_shop|{telegram_id}"),
             InlineKeyboardButton(text="üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data=f"open_inventory|{telegram_id}")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"open_stats|{telegram_id}"),
             InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏", callback_data=f"logout|{telegram_id}")]
        ]
    )
