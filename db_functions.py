from aiogram.types import Message, CallbackQuery, InlineQuery
from datetime import datetime
import aiosqlite
import logging
import asyncio, aiogram
from aiogram import Bot

import config
bot = Bot(token=config.TOKEN)
DB_PATH = config.DB_PATH

async def find_active_user_id(db, telegram_id):
    """–ò—â–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π user_id –ø–æ telegram_id"""

    if telegram_id is None:
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å telegram_id!")
        return None

    print(f"üîç –ü–æ–∏—Å–∫ user_id –¥–ª—è telegram_id: {telegram_id}")

    async with db.execute("""
        SELECT u.user_id 
        FROM user_session_history ush
        JOIN users u ON ush.user_id = u.user_id
        WHERE u.telegram_id = ? AND ush.is_active = TRUE
        ORDER BY ush.last_activity DESC
        LIMIT 1
    """, (telegram_id,)) as cursor:
        result = await cursor.fetchone()

    if not result:
        print(f"‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏—è—Ö!")
        return None

    user_id = result[0]
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω user_id: {user_id} –¥–ª—è telegram_id {telegram_id}")
    return user_id


async def update_last_activity(db, telegram_id: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–µ last_activity –≤ user_session_history –Ω–∞ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è."""

    user_id = await find_active_user_id(db, telegram_id)
    print(f"update_last_activity {user_id}")
    now = datetime.now()
    await db.execute("""
        UPDATE user_session_history 
        SET last_activity = ? 
        WHERE user_id = ? AND is_active = TRUE
    """, (now, user_id))
    await db.commit()



async def notify_all_users(message: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT telegram_id "
                              "FROM security "
                              "WHERE telegram_id IS NOT NULL "
                              "GROUP BY telegram_id") as cursor:
            users = await cursor.fetchall()

    for (telegram_id,) in users:
        try:
            await bot.send_message(telegram_id, message)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")
# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π (–ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å —á—Ç–æ–±—ã —Å–º–æ—Ç—Ä–µ–ª–∞ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ)
async def check_sessions():
    max_session_time = 3600
    function_delay = 60

    while True:
        async with aiosqlite.connect(DB_PATH) as db:
            now = datetime.now()

            # –í—ã–±–∏—Ä–∞–µ–º user_id, last_activity –∏ was_notified —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
            async with db.execute("""
                SELECT user_id, last_activity, was_notified 
                FROM user_session_history 
                WHERE is_active = TRUE
            """) as cursor:
                active_sessions = await cursor.fetchall()

            for user_id, last_activity, was_notified in active_sessions:
                try:
                    last_activity_time = datetime.strptime(last_activity, "%Y-%m-%d %H:%M:%S.%f")

                    # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 10 —Å–µ–∫—É–Ω–¥ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    if (now - last_activity_time).total_seconds() > max_session_time:
                        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –ø–æ user_id
                        await db.execute("""
                            UPDATE user_session_history 
                            SET is_active = FALSE, was_notified = TRUE
                            WHERE user_id = ?
                        """, (user_id,))
                        await db.commit()

                        # –ü–æ–ª—É—á–∞–µ–º telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        async with db.execute("""
                            SELECT telegram_id FROM users WHERE user_id = ?
                        """, (user_id,)) as user_cursor:
                            user = await user_cursor.fetchone()

                        if user and not was_notified:
                            telegram_id = user[0]
                            try:
                                await bot.send_message(telegram_id, "–í–∞—à–∞ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é /login")
                            except aiogram.exceptions.TelegramBadRequest as e:
                                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")

                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

        await asyncio.sleep(function_delay)
